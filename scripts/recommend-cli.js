#!/usr/bin/env node
// Run Step-2 recommendations without editing Apex files.
// Usage:
//   node scripts/recommend-cli.js --org <alias> --scenario 0
//   node scripts/recommend-cli.js --org <alias> --all

const { spawn } = require('child_process');

function parseArgs(argv) {
  const args = { scenario: 0, all: false, org: '' };
  for (let i = 2; i < argv.length; i++) {
    const a = argv[i];
    if (a === '--scenario' || a === '-s') {
      args.scenario = parseInt(argv[++i] || '0', 10) || 0;
    } else if (a === '--all' || a === '-a') {
      args.all = true;
    } else if (a === '--org' || a === '-o') {
      args.org = argv[++i] || '';
    } else if (a === '--help' || a === '-h') {
      args.help = true;
    }
  }
  return args;
}

function buildApex({ scenario, all }) {
  return `
// Generated by scripts/recommend-cli.js
Integer scenario = ${Number.isFinite(scenario) ? scenario : 0};
Boolean runAll = ${all ? 'true' : 'false'};

List<String> narratives = new List<String>{
    'For P1 customer issues, escalate the case to Tier 2 and set priority to High.',
    'When an SDR qualifies interest, move the lead to Qualified and set rating to Hot.',
    'If negotiations fail, mark the opportunity Closed Lost and capture a short loss reason.',
    'After resolving the issue, create a follow-up task on the case for a satisfaction call.'
};

List<String> includeObjects = new List<String>{'Case','Task','Lead','Opportunity'};

if (runAll) {
    for (Integer i = 0; i < narratives.size(); i++) {
        String n = narratives[i];
        System.debug('\n=== Scenario ' + i + ' ===\n' + n);
        RecommendFunctionalities.Response r = RecommendFunctionalities.run(n, includeObjects, 3);
        System.debug(JSON.serializePretty(r));
    }
} else {
    Integer idx = Math.max(0, Math.min(scenario, narratives.size() - 1));
    String narrative = narratives[idx];
    RecommendFunctionalities.Response r = RecommendFunctionalities.run(narrative, includeObjects, 3);
    System.debug(JSON.serializePretty(r));
}
`;
}

function runSf(apex, org) {
  const args = ['apex', 'run', '--apexcode', apex];
  if (org) args.push('--target-org', org);
  const sf = spawn('sf', args, { stdio: 'inherit' });
  sf.on('exit', (code) => process.exit(code || 0));
}

function main() {
  const args = parseArgs(process.argv);
  if (args.help) {
    console.log('Usage: node scripts/recommend-cli.js --org <alias> [--scenario N|--all]');
    process.exit(0);
  }
  const apex = buildApex(args);
  runSf(apex, args.org);
}

main();

